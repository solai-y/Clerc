events {}

http {
  # ----- CORS allowlist (unchanged) -----
  map $http_origin $cors_origin {
    default "";
    "~^http://localhost:3000$"                                         $http_origin;
    "~^https://clerc(-git-[a-z0-9-]+)?-solaiys-projects\.vercel\.app$" $http_origin;
  }

  map $request_method $cors_methods { default "GET, POST, PUT, PATCH, DELETE, OPTIONS"; }
  map $request_method $cors_headers { default "Content-Type, Authorization, X-Requested-With"; }

  # ----- Upstreams -----
  upstream company_service  { server company-service:5001; }
  upstream document_service { server document-service:5002; }
  upstream s3_service       { server s3-service:5003; }

  server {
    listen 80;
    client_max_body_size 100m;

    # -------------------- /company --------------------
    # Matches /company and /company/... (keeps the path as-is)
    location ^~ /company {
      proxy_pass http://company_service;   # <-- no trailing slash
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;

      proxy_hide_header Access-Control-Allow-Origin;
      proxy_hide_header Access-Control-Allow-Credentials;
      proxy_hide_header Access-Control-Allow-Headers;
      proxy_hide_header Access-Control-Allow-Methods;

      add_header Access-Control-Allow-Origin $cors_origin always;
      add_header Vary "Origin" always;
      add_header Access-Control-Allow-Methods $cors_methods always;
      add_header Access-Control-Allow-Headers $cors_headers always;

      if ($request_method = OPTIONS) { return 204; }
    }

    # -------------------- /documents --------------------
    # FIX: don't append /documents in proxy_pass; keep path untouched
    location ^~ /documents {
      proxy_pass http://document_service;  # <-- was .../documents (caused double path)
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;

      proxy_hide_header Access-Control-Allow-Origin;
      proxy_hide_header Access-Control-Allow-Credentials;
      proxy_hide_header Access-Control-Allow-Headers;
      proxy_hide_header Access-Control-Allow-Methods;

      add_header Access-Control-Allow-Origin $cors_origin always;
      add_header Vary "Origin" always;
      add_header Access-Control-Allow-Methods $cors_methods always;
      add_header Access-Control-Allow-Headers $cors_headers always;

      if ($request_method = OPTIONS) { return 204; }
    }

    # -------------------- /s3 --------------------
    # Upload-friendly proxy settings
    location ^~ /s3 {
      # Choose ONE of the two proxy_pass forms based on your upstream route:
      # 1) If upstream expects "/upload" (not "/s3/upload"):
      proxy_pass http://s3_service/;        # keeps only the suffix after /s3 (so /s3/upload -> /upload)

      # 2) If upstream expects "/s3/upload" (exact path), comment the above and use:
      # proxy_pass http://s3_service;       # keeps the whole path (/s3/upload stays /s3/upload)

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;

      # Forward multipart headers explicitly (helps some frameworks)
      proxy_set_header Content-Length $content_length;
      proxy_set_header Content-Type   $content_type;

      # For large files: avoid buffering body to disk (optional but helpful)
      # proxy_request_buffering off;

      client_max_body_size 100m;
      client_body_buffer_size 100m;
      proxy_read_timeout 300s;
      proxy_send_timeout 300s;

      proxy_hide_header Access-Control-Allow-Origin;
      proxy_hide_header Access-Control-Allow-Credentials;
      proxy_hide_header Access-Control-Allow-Headers;
      proxy_hide_header Access-Control-Allow-Methods;

      add_header Access-Control-Allow-Origin $cors_origin always;
      add_header Vary "Origin" always;
      add_header Access-Control-Allow-Methods $cors_methods always;
      add_header Access-Control-Allow-Headers $cors_headers always;

      if ($request_method = OPTIONS) { return 204; }
    }
  }
}