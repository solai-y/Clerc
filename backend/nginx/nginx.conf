events {}

http {
  # 1) Allowlist: reflect only allowed origins (add more lines as needed)
  map $http_origin $cors_origin {
    default "";
    "~^http://localhost:3000$"                                           $http_origin; # dev
    "~^https://clerc(-git-[a-z0-9_-]+)?-solaiys-projects\.vercel\.app$"  $http_origin; # vercel prod+previews for this project
    "https://clerc-git-cors-fix-3-solaiys-projects.vercel.app"           $http_origin; # current branch
  }

  # 2) Centralize allowed methods/headers (adjust as needed)
  map $request_method $cors_methods { default "GET, POST, PUT, PATCH, DELETE, OPTIONS"; }
  map $request_method $cors_headers { default "Content-Type, Authorization, X-Requested-With"; }

  upstream company_service  { server company-service:5001; }
  upstream document_service { server document-service:5002; }
  upstream s3_service       { server s3-service:5003; }

  server {
    listen 80;
    client_max_body_size 100m;

    # helper snippet for CORS (include in each API location)
    # (macro-ish: just repeat these 6 lines in each location)
    # - Hide upstream CORS
    # - Set single Origin header
    # - Preflight 204
    # - Vary Origin for CDNs
    # (You can't literally "include" inline; just keep this as a comment)
    # proxy_hide_header Access-Control-Allow-Origin;
    # proxy_hide_header Access-Control-Allow-Credentials;
    # proxy_hide_header Access-Control-Allow-Headers;
    # proxy_hide_header Access-Control-Allow-Methods;
    # add_header Access-Control-Allow-Origin $cors_origin always;
    # add_header Vary "Origin" always;
    # add_header Access-Control-Allow-Methods $cors_methods always;
    # add_header Access-Control-Allow-Headers $cors_headers always;
    # if ($request_method = OPTIONS) { return 204; }

    location /company/ {
      proxy_pass http://company_service/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;

      proxy_hide_header Access-Control-Allow-Origin;
      proxy_hide_header Access-Control-Allow-Credentials;
      proxy_hide_header Access-Control-Allow-Headers;
      proxy_hide_header Access-Control-Allow-Methods;

      add_header Access-Control-Allow-Origin $cors_origin always;
      add_header Vary "Origin" always;
      add_header Access-Control-Allow-Methods $cors_methods always;
      add_header Access-Control-Allow-Headers $cors_headers always;

      if ($request_method = OPTIONS) { return 204; }
    }

    location /documents/ {
      proxy_pass http://document_service/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;

      proxy_hide_header Access-Control-Allow-Origin;
      proxy_hide_header Access-Control-Allow-Credentials;
      proxy_hide_header Access-Control-Allow-Headers;
      proxy_hide_header Access-Control-Allow-Methods;

      add_header Access-Control-Allow-Origin $cors_origin always;
      add_header Vary "Origin" always;
      add_header Access-Control-Allow-Methods $cors_methods always;
      add_header Access-Control-Allow-Headers $cors_headers always;

      if ($request_method = OPTIONS) { return 204; }
    }

    location /s3/ {
      proxy_pass http://s3_service/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      client_max_body_size 100m;

      proxy_hide_header Access-Control-Allow-Origin;
      proxy_hide_header Access-Control-Allow-Credentials;
      proxy_hide_header Access-Control-Allow-Headers;
      proxy_hide_header Access-Control-Allow-Methods;

      add_header Access-Control-Allow-Origin $cors_origin always;
      add_header Vary "Origin" always;
      add_header Access-Control-Allow-Methods $cors_methods always;
      add_header Access-Control-Allow-Headers $cors_headers always;

      if ($request_method = OPTIONS) { return 204; }
    }
  }
}