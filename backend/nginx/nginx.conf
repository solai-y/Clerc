events {}

http {
  # Allowlist origins
  map $http_origin $cors_origin {
    default "";
    "~^http://localhost:3000$"                                           $http_origin;  # dev
    "~^https://clerc(-git-[a-z0-9-]+)?-solaiys-projects\.vercel\.app$"   $http_origin;  # vercel prod+previews
  }

  map $request_method $cors_methods { default "GET, POST, PUT, PATCH, DELETE, OPTIONS"; }
  map $request_method $cors_headers { default "Content-Type, Authorization, X-Requested-With"; }

  upstream company_service  { server company-service:5001; }
  upstream document_service { server document-service:5002; }
  upstream s3_service       { server s3-service:5003; }
  upstream ai_service       { server ai-service:5004; }

  server {
    listen 80;
    client_max_body_size 100m;

    # -------- /company (match both /company and /company/...) --------
    location ^~ /company {
      proxy_pass http://company_service/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;

      proxy_hide_header Access-Control-Allow-Origin;
      proxy_hide_header Access-Control-Allow-Credentials;
      proxy_hide_header Access-Control-Allow-Headers;
      proxy_hide_header Access-Control-Allow-Methods;

      add_header Access-Control-Allow-Origin $cors_origin always;
      add_header Vary "Origin" always;
      add_header Access-Control-Allow-Methods $cors_methods always;
      add_header Access-Control-Allow-Headers $cors_headers always;

      if ($request_method = OPTIONS) { return 204; }
    }

    # -------- /documents (match both /documents and /documents/...) --------
    location ^~ /documents {
      proxy_pass http://document_service/documents;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;

      proxy_hide_header Access-Control-Allow-Origin;
      proxy_hide_header Access-Control-Allow-Credentials;
      proxy_hide_header Access-Control-Allow-Headers;
      proxy_hide_header Access-Control-Allow-Methods;

      add_header Access-Control-Allow-Origin $cors_origin always;
      add_header Vary "Origin" always;
      add_header Access-Control-Allow-Methods $cors_methods always;
      add_header Access-Control-Allow-Headers $cors_headers always;

      if ($request_method = OPTIONS) { return 204; }
    }

    # -------- /s3 (match both /s3 and /s3/...) --------
    location ^~ /s3 {
      proxy_pass http://s3_service/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      client_max_body_size 100m;

      proxy_hide_header Access-Control-Allow-Origin;
      proxy_hide_header Access-Control-Allow-Credentials;
      proxy_hide_header Access-Control-Allow-Headers;
      proxy_hide_header Access-Control-Allow-Methods;

      add_header Access-Control-Allow-Origin $cors_origin always;
      add_header Vary "Origin" always;
      add_header Access-Control-Allow-Methods $cors_methods always;
      add_header Access-Control-Allow-Headers $cors_headers always;

      if ($request_method = OPTIONS) { return 204; }
    }

    # -------- /demo/ (static) --------
    location ^~ /demo/ {
      alias /usr/share/nginx/html/;
      autoindex on;

      # Match dev CORS/header format for consistency
      proxy_hide_header Access-Control-Allow-Origin;
      proxy_hide_header Access-Control-Allow-Credentials;
      proxy_hide_header Access-Control-Allow-Headers;
      proxy_hide_header Access-Control-Allow-Methods;

      add_header Access-Control-Allow-Origin $cors_origin always;
      add_header Vary "Origin" always;
      add_header Access-Control-Allow-Methods $cors_methods always;
      add_header Access-Control-Allow-Headers $cors_headers always;

      if ($request_method = OPTIONS) { return 204; }
    }

    # -------- /ai (match both /ai and /ai/...) --------
    location ^~ /ai/ {
      proxy_pass http://ai_service/;
      proxy_http_version 1.1;
      proxy_read_timeout 300s;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;

      proxy_hide_header Access-Control-Allow-Origin;
      proxy_hide_header Access-Control-Allow-Credentials;
      proxy_hide_header Access-Control-Allow-Headers;
      proxy_hide_header Access-Control-Allow-Methods;

      add_header Access-Control-Allow-Origin $cors_origin always;
      add_header Vary "Origin" always;
      add_header Access-Control-Allow-Methods $cors_methods always;
      add_header Access-Control-Allow-Headers $cors_headers always;

      if ($request_method = OPTIONS) { return 204; }
    }
  }
}
